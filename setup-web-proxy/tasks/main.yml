# (c) 2016 DataNexus Inc.  All Rights Reserved
---
# if an http_proxy value was set in the proxy_env dictionary, then use it to
# build the proxy_vars dictionary and add the value found to the /etc/yum.conf
# file
- set_fact: http_proxy='{{(proxy_env | default({})).http_proxy | default("")}}'
- block:
  - name: Set http_proxy environment variables
    set_fact:
      proxy_vars:
        http_proxy: "{{ http_proxy }}"
        https_proxy: "{{ http_proxy }}"
        HTTP_PROXY: "{{ http_proxy }}"
        HTTPS_PROXY: "{{ http_proxy }}"
  - name: add http_proxy to yum.conf
    become: true
    lineinfile:
      dest: /etc/yum.conf
      regexp: "^proxy="
      line:  "proxy={{http_proxy}}"
      state: present
  when: not (http_proxy | trim == '')
# if a no_proxy value was set in the proxy_env dictionary, then use it to build
# the proxy_vars dictionary and add the value found to the /etc/yum.conf file
- set_fact: no_proxy='{{(proxy_env | default({})).no_proxy | default("")}}'
- name: Set no_proxy environment variables
  set_fact:
    no_proxy_vars:
      no_proxy: "{{ no_proxy }}"
      NO_PROXY: "{{ no_proxy }}"
  when: not (no_proxy | trim == '')
# if a proxy_username value was set in the proxy_env dictionary, then use it to
# build the proxy_vars dictionary and add the value found to the /etc/yum.conf
# file
- set_fact: proxy_username='{{(proxy_env | default({})).proxy_username | default("")}}'
- block:
  - name: Set proxy_username environment variable
    set_fact:
      proxy_username_var:
        proxy_username: "{{ proxy_username }}"
  - name: add proxy_username to yum.conf if defined
    become: true
    lineinfile:
      dest: /etc/yum.conf
      regexp: "^proxy_username="
      line:  "proxy_username={{proxy_username}}"
      state: present
  when: not (proxy_username | trim == '')
# if a proxy_password value was set in the proxy_env dictionary, then use it to
# build the proxy_vars dictionary and add the value found to the /etc/yum.conf
# file
- set_fact: proxy_password='{{(proxy_env | default({})).proxy_password | default("")}}'
- block:
  - name: Set proxy_password environment variable
    set_fact:
      proxy_password_var:
        proxy_password: "{{ proxy_password }}"
  - name: add proxy_password to yum.conf if defined
    become: true
    lineinfile:
      dest: /etc/yum.conf
      regexp: "^proxy_password="
      line:  "proxy_password={{proxy_password}}"
      state: present
  when: not (proxy_password | trim == '')
# use the values found so far to build the environment_vars
- name: Set environment variables
  set_fact:
    environment_vars:  "{{(no_proxy_vars|default({})) | combine(proxy_vars|default({})) | combine(proxy_username_var|default({})) | combine(proxy_password_var|default({}))}}"
# when the reset_proxy_settings flag is set, if values were not passed in for
# any of the values defined above, then ensure that he corresponding line
# does not appear in the /etc/yum.conf file (if a value is defined for any of
# these parameters, the corresponding line in the /etc/yum.conf file would
# already be reset to the new value by this point)
- block:
  - name: remove http_proxy from yum.conf if defined
    become: true
    lineinfile:
      dest: /etc/yum.conf
      regexp:  "^proxy="
      state: absent
    when: http_proxy | trim == ''
  - name: remove proxy_username from yum.conf if defined
    become: true
    lineinfile:
      dest: /etc/yum.conf
      regexp:  "^proxy_username="
      state: absent
    when: proxy_username | trim == ''
  - name: remove proxy_password from yum.conf if defined
    become: true
    lineinfile:
      dest: /etc/yum.conf
      regexp:  "^proxy_password="
      state: absent
    when: proxy_password | trim == ''
  when: (reset_proxy_settings | default(false))
# and if an http_proxy value was defined, a proxy_certs_file was defined, and
# that file exists on the Ansible host, then move over the defined
# proxy_certs_file to the target nodes and update the list of trusted
# certificates to include the certificates bundled in that file
- block:
  - local_action: stat path="{{proxy_certs_file}}"
    register: check_path
  - name: Unpack certificates
    become: true
    unarchive:
      src: "{{proxy_certs_file}}"
      dest: /etc/pki/ca-trust/source/anchors
    when: check_path.stat.exists
  - name: Add certificates to list of trusted certs
    become: true
    shell: update-ca-trust
    when: check_path.stat.exists
  when: not(http_proxy | trim == '') and (proxy_certs_file | default('')) != ''
